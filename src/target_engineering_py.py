# -*- coding: utf-8 -*-
"""target_engineering.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W17EZzluPC68QvhniTPquEinygpbRRsu
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from datetime import datetime

def calculate_rfm(df: pd.DataFrame, snapshot_date: str = "2025-07-01") -> pd.DataFrame:
    df['TransactionStartTime'] = pd.to_datetime(df['TransactionStartTime']).dt.tz_localize(None)
    snapshot = pd.to_datetime(snapshot_date)

    rfm = df.groupby("CustomerId").agg({
        "TransactionStartTime": lambda x: (snapshot - x.max()).days,
        "TransactionId": "count",
        "Amount": "sum"
    })

    rfm.columns = ["Recency", "Frequency", "Monetary"]
    return rfm.reset_index()



def cluster_customers(rfm_df: pd.DataFrame, random_state: int = 42) -> pd.DataFrame:
    rfm_values = rfm_df[["Recency", "Frequency", "Monetary"]].copy()

    scaler = StandardScaler()
    rfm_scaled = scaler.fit_transform(rfm_values)

    kmeans = KMeans(n_clusters=3, random_state=random_state)
    rfm_df["Cluster"] = kmeans.fit_predict(rfm_scaled)

    return rfm_df


def label_high_risk(rfm_clustered: pd.DataFrame) -> pd.DataFrame:
    cluster_summary = rfm_clustered.groupby("Cluster")[["Recency", "Frequency", "Monetary"]].mean()

    # Heuristic: high recency (not recent), low frequency, low monetary = risky
    high_risk_cluster = cluster_summary.sort_values(
        by=["Frequency", "Monetary", "Recency"],
        ascending=[True, True, False]
    ).index[0]

    rfm_clustered["is_high_risk"] = (rfm_clustered["Cluster"] == high_risk_cluster).astype(int)
    return rfm_clustered[["CustomerId", "is_high_risk"]]


def build_proxy_target(df: pd.DataFrame) -> pd.DataFrame:
    rfm = calculate_rfm(df)
    rfm_clustered = cluster_customers(rfm)
    target_df = label_high_risk(rfm_clustered)

    # Merge back into the main data
    merged = df.merge(target_df, on="CustomerId", how="left")
    merged["is_high_risk"] = merged["is_high_risk"].fillna(0).astype(int)  # fallback to 0 for new customers

    return merged


if __name__ == "__main__":
    df = pd.read_csv("data.csv")
    df_with_target = build_proxy_target(df)

    # Save or inspect
    df_with_target.to_csv("with_proxy_target.csv", index=False)
    print("âœ… Target created. High-risk column added.")